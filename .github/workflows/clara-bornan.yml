name: Build and Deploy Clara

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  ACR_RESOURCE_GROUP: CloudBornan
  AZURE_CONTAINER_REGISTRY: bornan
  CONTAINER_NAME: clara-bornan
  CLUSTER_NAME: cluster-bornan
  CLUSTER_RESOURCE_GROUP: CloudBornan
  CLUSTER_RESOURCE_TYPE: Microsoft.ContainerService/managedClusters
  DEPLOYMENT_MANIFEST_PATH: |
    ./k8s/configmap.yaml
    ./k8s/secret.yaml
    ./k8s/deployment-rails.yaml
    ./k8s/deployment-sidekiq.yaml
    ./k8s/hpa.yaml
    ./k8s/service.yaml
    ./k8s/ingress.yaml
  DOCKER_FILE: ./Dockerfile
  BUILD_CONTEXT_PATH: ./
  NAMESPACE: client-saas
  AUTH_TYPE: SERVICE_PRINCIPAL

jobs:
  buildImage:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2.2.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          auth-type: ${{ env.AUTH_TYPE }}

      - name: Build and push images to ACR (sha + latest)
        run: |
          GIT_SHA=$(git rev-parse HEAD)
          az acr build \
            --registry ${{ env.AZURE_CONTAINER_REGISTRY }} \
            --resource-group ${{ env.ACR_RESOURCE_GROUP }} \
            --file ${{ env.DOCKER_FILE }} \
            --build-arg GIT_SHA=$GIT_SHA \
            --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }} \
            --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:latest \
            ${{ env.BUILD_CONTEXT_PATH }}

  deploy:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [buildImage]
    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2.2.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          auth-type: ${{ env.AUTH_TYPE }}

      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'

      - name: Get K8s context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          admin: 'false'
          use-kubelogin: 'true'
          resource-type: ${{ env.CLUSTER_RESOURCE_TYPE }}

      - name: Is private cluster
        if: ${{ env.CLUSTER_RESOURCE_TYPE != 'Microsoft.ContainerService/fleets' }}
        id: isPrivate
        run: |
          result=$(az aks show --resource-group ${{ env.CLUSTER_RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }} --query "apiServerAccessProfile.enablePrivateCluster" -o tsv)
          echo "PRIVATE_CLUSTER=$result" >> "$GITHUB_OUTPUT"

      - name: Deploy manifests to AKS
        uses: Azure/k8s-deploy@v5
        with:
          action: deploy
          manifests: ${{ env.DEPLOYMENT_MANIFEST_PATH }}
          images: |
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
          name: ${{ env.CLUSTER_NAME }}
          private-cluster: ${{ steps.isPrivate.outputs.PRIVATE_CLUSTER == 'true' }}
          namespace: ${{ env.NAMESPACE }}
          resource-type: ${{ env.CLUSTER_RESOURCE_TYPE }}
          annotate-namespace: ${{ env.CLUSTER_RESOURCE_TYPE != 'Microsoft.ContainerService/fleets' }}
